{"version":3,"sources":["Homescreen/Nav.js","Homescreen/axios.js","Homescreen/Requests.js","Homescreen/Banner.js","Homescreen/Row.js","Homescreen/Homescreen.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","setShow","transistionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomance","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundImage","backdrop_path","background","title","name","original_name","overview","substr","Row","fetchURL","isLargeRow","movies","setMovies","map","poster_path","id","Homescreen","isSmallRow","iisSmallRow","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c40c998.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    \r\n    const[show,setShow]=useState(false);\r\n\r\n    const transistionNavBar=()=> {\r\n        if (window.scrollY > 100) {\r\n           setShow(true);\r\n        } else {\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\nuseEffect(()=>{\r\n    window.addEventListener(\"scroll\",transistionNavBar);\r\n    return() => window.removeEventListener(\"scroll\",transistionNavBar)\r\n},[]);\r\n\r\n    return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n        <div className=\"nav_content\">\r\n        <img className=\"nav_logo\"\r\n           src =\"https://logos-download.com/wp-content/uploads/2016/03/Netflix_logo.png\"\r\n           alt =\"Netflix LOGO\" \r\n           />\r\n\r\n         <img className=\"nav_avatar\"\r\n         src = \"https://toppng.com/public/uploads/preview/cool-avatar-transparent-image-cool-boy-avatar-11562893383qsirclznyw.png\"\r\n         alt=\"Netflix Avatar\"\r\n         \r\n         />   \r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","// Typically we would store the API key in a {process.env.API_KEY}\r\nconst API_KEY = \"81d10c99c9ae8d59a80e92781bd7fdf7\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/discover/movie?api_key=${API_KEY}&sort_by=popularity.desc`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomance: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n};\r\n\r\nexport default requests;","import axios from './axios';\r\nimport React , {useState, useEffect} from 'react';\r\nimport './Banner.css';\r\nimport requests from './Requests'\r\n\r\nfunction Banner() {\r\n\r\n  const [movie, setMovie] = useState ([]);\r\n\r\n  useEffect (()=> {\r\n    async function fetchData(){\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random()*request.data.results.length-1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData()\r\n  },[]);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(string,n){\r\n\r\n    return string?.length>n ? string.substr(0, n-1) + \"...\" : string;\r\n\r\n  }\r\n\r\n\r\n    return(\r\n        <header className=\"banner\"\r\n          style={{\r\n            \r\n            backgroundImage:`url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n            background:\"no-repeat center center/cover\",\r\n          }}\r\n        >\r\n           <div className=\"banner__contents\">\r\n             <h1 className=\"banner__title\">{movie?.title || movie?.name ||movie?.original_name}</h1>\r\n             <div className=\"banner__buttons\">\r\n                 <button className=\"banner__button\">Play</button>\r\n                 <button className=\"banner__button\">My List</button>\r\n             </div>\r\n             <h1 className=\"banner__description\">\r\n               \r\n               {truncate(movie?.overview,150)}\r\n             \r\n             \r\n             </h1>\r\n             <div className=\"banner__fadeBottom\" />\r\n           </div>\r\n\r\n</header>\r\n\r\n    ) \r\n}\r\n\r\nexport default Banner;\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nfunction Row({title, fetchURL, isLargeRow=false}) {\r\n\r\n const [movies,setMovies]=useState([]);\r\n\r\n   const base_url='https://image.tmdb.org/t/p/original/';\r\n\r\n   useEffect(()=>{\r\n\r\n    async function fetchData(){\r\n        const request = await axios.get(fetchURL);\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n   fetchData();\r\n   },[fetchURL] );\r\n\r\n   console.log(movies)\r\n    return (\r\n    <div className=\"row\">\r\n            <h2>{title}</h2>\r\n        <div className='row__posters'>\r\n            {movies.map(movie => (\r\n            <img \r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            key={movie.id}\r\n            src={`${base_url}${\r\n            isLargeRow ? movie.poster_path : movie.backdrop_path}`\r\n            } alt={movie.name}/>\r\n            ))}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport \"./Homescreen.css\"\r\nimport Nav from \"./Nav\"\r\nimport Banner from \"./Banner\"\r\nimport requests from \"./Requests\"\r\nimport Row from './Row'\r\n\r\nfunction Homescreen() {\r\n    return (\r\n        <div className='homeScreen'>\r\n            <Nav />\r\n            <Banner />\r\n            <Row \r\n            title ='Trending Now'\r\n            fetchURL={requests.fetchTrending}\r\n            isLargeRow\r\n            />\r\n\r\n            <Row \r\n            title ='Netflix Originals'\r\n            fetchURL={requests.fetchNetflixOriginals}\r\n            isSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Top Rated'\r\n            fetchURL={requests.fetchTopRated}\r\n            isSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Action Movies'\r\n            fetchURL={requests.fetchActionMovies}\r\n            isSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Comedy Movies'\r\n            fetchURL={requests.fetchComedyMovies}\r\n            iisSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Horror Movies'\r\n            fetchURL={requests.fetchHorrorMovies}\r\n            isSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Romance'\r\n            fetchURL={requests.fetchRomance}\r\n            isSmallRow\r\n            />\r\n\r\n            <Row \r\n            title ='Documentaries'\r\n            fetchURL={requests.fetchDocumentaries}\r\n            isSmallRow\r\n            />           \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homescreen;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Homescreen from \"./Homescreen/Homescreen\"\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Homescreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}